[
  {
    "id": 1,
    "title": "Display odd numbers between 1 and 30",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Prints all the odd numbers from 1 to 30 using a loop.",
    "examples": [
      {
        "input": "1 ... 30",
        "output": "1 3 5 7 9 11 13 15 17 19 21 23 25 27 29"
      }
    ],
    "expected_output": "1 3 5 7 9 11 13 15 17 19 21 23 25 27 29"
  },
  {
    "id": 2,
    "title": "Sum of odd numbers between 1 and 100",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the sum of all odd numbers between 1 and 100.",
    "examples": [
      {
        "input": "1...100",
        "output": "2500"
      }
    ],
    "expected_output": "2500"
  },
  {
    "id": 3,
    "title": "Total number of odd numbers between 1 and 100",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Counts how many odd numbers are in the range 1 to 100.",
    "examples": [
      {
        "input": "1...100",
        "output": "50"
      }
    ],
    "expected_output": "50"
  },
  {
    "id": 4,
    "title": "Find sum of 'n' natural numbers",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the sum of first 'n' natural numbers using formula or loop.",
    "examples": [
      {
        "input": "5",
        "output": "15"
      }
    ],
    "expected_output": "15"
  },
  {
    "id": 5,
    "title": "Find number of digits in a number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Counts how many digits a number has.",
    "examples": [

      {
        "input": "789",
        "output": "3"
      }
    ],
    "expected_output": "3"
  },
  {
    "id": 6,
    "title": "Reverse a number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Reverses the digits of a given number.",
    "examples": [
      {
        "input": "1234",
        "output": "4321"
      }
    ],
    "expected_output": "4321"
  },
  {
    "id": 7,
    "title": "Find Armstrong number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Checks if a number is an Armstrong number (sum of cubes of digits equals the number).",
    "examples": [
      {
        "input": "153",
        "output": "Armstrong Number"
      }
    ],
    "expected_output": "Armstrong Number"
  },
  {
    "id": 8,
    "title": "Print number in words",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Displays each digit of a number in words.",
    "examples": [
      {
        "input": "123",
        "output": "One Two Three"
      }
    ],
    "expected_output": "One Two Three"
  },
  {
    "id": 9,
    "title": "Check if number is palindrome",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "A number is a palindrome if it reads the same backward.",
    "examples": [
      {
        "input": "121",
        "output": "Palindrome"
      }
    ],
    "expected_output": "Palindrome"
  },
  {
    "id": 10,
    "title": "Print N prime numbers and find sum and average",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Generates first N prime numbers and calculates sum and average.",
    "examples": [
      {
        "input": "5",
        "output": "2 3 5 7 11, Sum = 28, Avg = 5.6"
      }
    ],
    "expected_output": "2 3 5 7 11, Sum = 28, Avg = 5.6"
  },
  {
    "id": 11,
    "title": "Check if a number is perfect",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "A number is perfect if it is equal to the sum of its proper divisors.",
    "examples": [
      {
        "input": "6",
        "output": "Perfect Number"
      }
    ],
    "expected_output": "Perfect Number"
  },
  {
    "id": 12,
    "title": "Find factorial of a number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the factorial of a given number.",
    "examples": [
      {
        "input": "3",
        "output": "6"
      }
    ],
    "expected_output": "6"
  },
  {
    "id": 13,
    "title": "Print Fibonacci series up to N",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Generates Fibonacci numbers up to a given number N.",
    "examples": [
      {
        "input": "10",
        "output": "0 1 1 2 3 5 8"
      }
    ],
    "expected_output": "0 1 1 2 3 5 8"
  },
  {
    "id": 14,
    "title": "Check if year is a leap year",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Determines if a given year is a leap year or not.",
    "examples": [
      {
        "input": "2020",
        "output": "Leap Year"
      }
    ],
    "expected_output": "Leap Year"
  },
  {
    "id": 15,
    "title": "Check if a number is even or odd",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Determines if a number is even or odd using modulus operator.",
    "examples": [
      {
        "input": "7",
        "output": "Odd"
      }
    ],
    "expected_output": "Odd"
  },
  {
    "id": 16,
    "title": "Swap two numbers without using a third variable",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Swaps the values of two variables without using a third temporary variable.",
    "examples": [
      {
        "input": "a = 5, b = 10",
        "output": "a = 10, b = 5"
      }
    ],
    "expected_output": "a = 10, b = 5"
  },
  {
    "id": 17,
    "title": "Find LCM and HCF of two numbers",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the Least Common Multiple and Highest Common Factor of two numbers.",
    "examples": [
      {
        "input": "4 and 6",
        "output": "LCM = 12, HCF = 2"
      }
    ],
    "expected_output": "LCM = 12, HCF = 2"
  },
  {
    "id": 18,
    "title": "Check if number is prime",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Determines if a number is prime (only divisible by 1 and itself).",
    "examples": [
      {
        "input": "7",
        "output": "Prime Number"
      }
    ],
    "expected_output": "Prime Number"
  },
  {
    "id": 19,
    "title": "Print multiplication table of a number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Displays the multiplication table of a given number up to 10.",
    "examples": [
      {
        "input": "3",
        "output": "3 6 9 12 15 18 21 24 27 30"
      }
    ],
    "expected_output": "3 6 9 12 15 18 21 24 27 30"
  },
  {
    "id": 20,
    "title": "Count vowels and consonants in a String",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Counts the number of vowels and consonants in a given String.",
    "examples": [
      {
        "input": "hello",
        "output": "Vowels: 2, Consonants: 3"
      }
    ],
    "expected_output": "Vowels: 2, Consonants: 3"
  },
  {
    "id": 21,
    "title": "Convert Celsius to Fahrenheit",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Converts temperature from Celsius to Fahrenheit.",
    "examples": [
      {
        "input": "100",
        "output": "212"
      }
    ],
    "expected_output": "212"
  },
  {
    "id": 22,
    "title": "Convert decimal to binary",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Converts a decimal number to its binary equivalent.",
    "examples": [

      {
        "input": "5",
        "output": "101"
      }
    ],
    "expected_output": "101"
  },
  {
    "id": 23,
    "title": "Calculate power of a number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates base raised to the power exponent.",
    "examples": [
      {
        "input": "2^3",
        "output": "8"
      }
    ],
    "expected_output": "8"
  },
  {
    "id": 24,
    "title": "Find maximum of three numbers",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Finds the largest among three given numbers.",
    "examples": [
      {
        "input": "3, 7, 5",
        "output": "7"
      }
    ],
    "expected_output": "7"
  },
  {
    "id": 25,
    "title": "Check alphabet is vowel or consonant",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Checks if a given alphabet is a vowel or consonant.",
    "examples": [
      {
        "input": "a",
        "output": "Vowel"
      }
    ],
    "expected_output": "Vowel"
  },
  {
    "id": 26,
    "title": "Calculate area of circle",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the area of a circle using radius.",
    "examples": [
      {
        "input": "r = 7",
        "output": "153.938"
      }
    ],
    "expected_output": "153.938"
  },
  {
    "id": 27,
    "title": "Print all ASCII values",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Prints ASCII values for characters A-Z and a-z.",
    "examples": [
      {
        "input": "a",
        "output": "97"
      }
    ],
    "expected_output": "99"
  },
  {
    "id": 28,
    "title": "Find sum of digits of a number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the sum of digits in a number.",
    "examples": [
      {
        "input": "1234",
        "output": "10"
      }
    ],
    "expected_output": "10"
  },
  {
    "id": 29,
    "title": "Check if a character is alphabet or not",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Checks whether a given character is an alphabet.",
    "examples": [
      {
        "input": "A",
        "output": "Alphabet"
      }
    ],
    "expected_output": "Alphabet"
  },
  {
    "id": 30,
    "title": "Find cube of a number",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the cube of a given number.",
    "examples": [
      {
        "input": "3",
        "output": "27"
      }
    ],
    "expected_output": "27"
  },
  {
    "id": 31,
    "title": "Check if triangle is valid",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Checks whether a triangle is valid based on angle sum property.",
    "examples": [
      {
        "input": "60, 60, 60",
        "output": "Valid Triangle"
      }
    ],
    "expected_output": "Valid Triangle"
  },
  {
    "id": 32,
    "title": "Check if character is uppercase or lowercase",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Determines if a character is uppercase or lowercase.",
    "examples": [
      {
        "input": "z",
        "output": "Lowercase"
      }
    ],
    "expected_output": "Lowercase"
  },
  {
    "id": 33,
    "title": "Find area of triangle using Heron's formula",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates the area of a triangle with given side lengths.",
    "examples": [
      {
        "input": "a=3, b=4, c=5",
        "output": "6"
      }
    ],
    "expected_output": "6"
  },
  {
    "id": 34,
    "title": "Calculate simple interest",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates simple interest using principal, rate, and time.",
    "examples": [
      {
        "input": "P=1000, R=5, T=2",
        "output": "100"
      }
    ],
    "expected_output": "100"
  },
  {
    "id": 35,
    "title": "Check if a number is divisible by another",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Checks if one number is divisible by another.",
    "examples": [
      {
        "input": "10, 2",
        "output": "Divisible"
      }
    ],
    "expected_output": "Divisible"
  },
  {
    "id": 36,
    "title": "Find perimeter of a rectangle",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Calculates perimeter using length and width.",
    "examples": [
      {
        "input": "L=5, W=3",
        "output": "16"
      }
    ],
    "expected_output": "16"
  },
  {
    "id": 37,
    "title": "Find average of N numbers",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Computes average of a list of numbers.",
    "examples": [
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": "3"
      }
    ],
    "expected_output": "3"
  },
  {
    "id": 38,
    "title": "Check if a String is palindrome",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Checks if a String reads the same forward and backward.",
    "examples": [
      {
        "input": "madam",
        "output": "Palindrome"
      }
    ],
    "expected_output": "Palindrome"
  },
  {
    "id": 39,
    "title": "Check if number is a power of 2",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Checks whether a number is a power of 2.",
    "examples": [
      {
        "input": "8",
        "output": "True"
      }
    ],
    "expected_output": "True"
  },
  {
    "id": 40,
    "title": "Print pattern of stars in pyramid",
    "difficulty": "Basic",
    "category": "Fandamental",
    "explanation": "Prints a star pyramid pattern up to N rows.",
    "examples": [
      {
        "input": "3",
        "output": "\n  \n \n*"
      }
    ],
    "expected_output": "Star pyramid pattern"
  },
  {
    "id": 41,
    "title": "Two Sum",
    "difficulty": "Easy",
    "category": "Array",
    "explanation": "Find two numbers in the Array that add up to a given target.",
   "examples" : [
     {
       "input": "nums = [2, 7, 11, 15], target = 9",
       "output": "[0, 1]"
     }
   ],
    "expected_output": "[0, 1]"
  },
  {
    "id": 42,
    "title": "Contains Duplicate",
    "difficulty": "Easy",
    "category": "Array",
    "explanation": "Check if any value appears more than once in the Array.",
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "true"
      }
    ],
    "expected_output": "true"
  },
  {
    "id": 43,
    "title": "Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "category": "Array",
    "explanation": "Find the best time to buy and sell stock to maximize profit.",
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5"
      }
      ],
    "expected_output": "5"
  },
  {
    "id": 44,
    "title": "Second Largest",
    "difficulty": "Easy",
    "category": "Array",
    "explanation": "Find the second largest number in an Array.",
    "examples": [
      {
        "input": "nums = [12, 35, 1, 10, 34, 1]",
        "output": "34"
      }
      ],
    "expected_output": "34"
  },
  {
    "id": 45,
    "title": "Rotate Array",
    "difficulty": "medium",
    "category": "Array",
    "explanation": "Rotate the elements of an Array by k steps to the right.",
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7], k = 3",
        "output": "[5, 6, 7, 1, 2, 3, 4]"
      }
      ],
    "expected_output": "[5, 6, 7, 1, 2, 3, 4]"
  },
  {
    "id": 46,
    "title": "Best Time to Buy and Sell Stock II",
    "difficulty": "Easy",
    "category": "Array",
    "explanation": "Find the maximum profit by buying and selling stock multiple times.",
    "examples": [
      {
        "input": "prices = [1, 7, 5, 3, 6, 4]",
        "output": "7"
      }
      ],
    "expected_output": "7"
  },
  {
    "id": 47,
    "title": "Maximum SubArray Sum",
    "difficulty": "medium",
    "category": "Array",
    "explanation": "Find the contiguous subArray with the maximum sum.",
    "examples": [
      {
        "input": "nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]",
        "output": "6"
      }
      ],
    "expected_output": "6"
  },
  {
    "id": 48,
    "title": "Linear Search",
    "difficulty": "Easy",
    "category": "Searching",
    "explanation": "Search for a value in the Array by checking each element sequentially.",
    "examples": [
      {
        "input": "nums = [10, 20, 30, 40], target = 20",
        "output": "1"
      }
      ],
    "expected_output": "1"
  },
  {
    "id": 49,
    "title": "Binary Search",
    "difficulty": "Easy",
    "category": "Searching",
    "explanation": "Search for a value in a sorted Array by repeatedly dividing the search interval in half.",
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6], target = 4",
        "output": "3"
      }
      ],
    "expected_output": "3"
  },
  {
    "id": 50,
    "title": "Search Insert Position",
    "difficulty": "medium",
    "category": "Searching",
    "explanation": "Find the index where a target value should be inserted in a sorted Array.",
    "examples": [
      {
        "input": "nums = [1, 3, 5, 6], target = 5",
        "output": "2"
      }
      ],
    "expected_output": "2"
  },
  {
    "id": 51,
    "title": "Single Element Sorted Array",
    "difficulty": "medium",
    "category": "Searching",
    "explanation": "Find the single element in a sorted Array where all other elements appear twice.",
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4]",
        "output": "4"
      }
      ],
    "expected_output": "4"
  },
  {
    "id": 52,
    "title": "Search Element in 2D Array",
    "difficulty": "medium",
    "category": "Searching",
    "explanation": "Search for a target element in a 2D matrix.",
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], target = 5",
        "output": "[1, 1]"
      }
      ],
    "expected_output": "[1, 1]"
  },
  {
    "id": 53,
    "title": "Anagram",
    "difficulty": "Easy",
    "category": "String",
    "explanation": "Check if two Strings are anagrams of each other.",
    "examples": [
      {
        "input": "s = 'anagram', t = 'nagaram'",
        "output": "true"
      }
      ],
    "expected_output": "true"
  },
  {
    "id": 54,
    "title": "Non-Repeating Character",
    "difficulty": "Easy",
    "category": "String",
    "explanation": "Find the first non-repeating character in a String.",
    "examples": [
      {
        "input": "s = 'loveleetcode'",
        "output": "v"
      }
      ],
    "expected_output": "v"
  },
  {
    "id": 55,
    "title": "Group Anagram",
    "difficulty": "medium",
    "category": "String",
    "explanation": "Group Strings that are anagrams of each other.",
    "examples": [
      {
        "input": "strs = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']",
        "output": "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]"
      }
      ],
    "expected_output": "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]"
  },
  {
    "id": 56,
    "title": "String Rotation of Each Other",
    "difficulty": "medium",
    "category": "String",
    "explanation": "Check if one String is a rotation of another.",
    "examples": [
      {
        "input": "s1 = 'abcde', s2 = 'cdeab'",
        "output": "true"
      }
      ],
    "expected_output": "true"
  },
  {
    "id": 57,
    "title": "Valid Palindrome",
    "difficulty": "Easy",
    "category": "String",
    "explanation": "Check if a String is a palindrome (reads the same forward and backward).",
    "examples": [
      {
        "input": "s = 'racecar'",
        "output": "true"
      }
      ],
    "expected_output": "true"
  },
  {
    "id": 58,
    "title": "Row Wise Printing",
    "difficulty": "Easy",
    "category": "2D Array",
    "explanation": "Print the elements of a 2D Array row by row.",
    "examples": [
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 2, 3, 4]"
      }],
    "expected_output": "[1, 2, 3, 4]"
  },
  {
    "id": 59,
    "title": "Column Wise Printing",
    "difficulty": "Easy",
    "category": "2D Array",
    "explanation": "Print the elements of a 2D Array column by column.",
    "examples": [
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 3, 2, 4]"
      }
      ],
    "expected_output": "[1, 3, 2, 4]"
  },
  {
    "id": 60,
    "title": "Spiral Matrix",
    "difficulty": "medium",
    "category": "2D Array",
    "explanation": "Print the elements of a matrix in spiral order.",
    "examples": [
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 2, 4, 3]"
      }
      ],
    "expected_output": "[1, 2, 4, 3]"
  },
  {
    "id": 61,
    "title": "Rotate Image",
    "difficulty": "medium",
    "category": "2D Array",
    "explanation": "Rotate a given 2D matrix 90 degrees clockwise.",
    "examples": [
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[[3, 1], [4, 2]]"
      }
      ],
    "expected_output": "[[3, 1], [4, 2]]"
  },
  {
    "id": 62,
    "title": "Move Zeroes to End",
    "difficulty": "medium",
    "category": "Sorting",
    "explanation": "Move all zero elements in an Array to the end while maintaining the relative order of non-zero elements.",
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]"
      }
      ],
    "expected_output": "[1, 3, 12, 0, 0]"
  },
  {
    "id": 63,
    "title": "Sort 0s, 1s, 2s",
    "difficulty": "Easy",
    "category": "Sorting",
    "explanation": "Sort an Array containing only 0s, 1s, and 2s without using the built-in sort function.",
    "examples": [
      {
        "input": "nums = [2, 0, 2, 1, 1, 0]",
        "output": "[0, 0, 1, 1, 2, 2]"
      }
      ],
    "expected_output": "[0, 0, 1, 1, 2, 2]"
  },
  {
    "id": 64,
    "title": "Bubble Sort",
    "difficulty": "Easy",
    "category": "Sorting",
    "explanation": "Sort an Array using the bubble sort algorithm, where the largest element bubbles to the end with each pass.",
    "examples": [
      {
        "input": "nums = [64, 34, 25, 12, 22, 11, 90]",
        "output": "[11, 12, 22, 25, 34, 64, 90]"
      }
      ],
    "expected_output": "[11, 12, 22, 25, 34, 64, 90]"
  },
  {
    "id": 65,
    "title": "Quick Sort",
    "difficulty": "medium",
    "category": "Sorting",
    "explanation": "Sort an Array using the quick sort algorithm, which uses divide-and-conquer and partitioning of elements.",
    "examples": [
      {
        "input": "nums = [10, 7, 8, 9, 1, 5]",
        "output": "[1, 5, 7, 8, 9, 10]"
      }
      ],
    "expected_output": "[1, 5, 7, 8, 9, 10]"
  },
  {
    "id": 66,
    "title": "Selection Sort",
    "difficulty": "Easy",
    "category": "Sorting",
    "explanation": "Sort an Array by repeatedly finding the minimum element and swapping it with the first unsorted element.",
    "examples": [
      {
        "input": "nums = [64, 34, 25, 12, 22, 11, 90]",
        "output": "[11, 12, 22, 25, 34, 64, 90]"
      }
      ],
    "expected_output": "[11, 12, 22, 25, 34, 64, 90]"
  },
  {
    "id": 67,
    "title": "Insertion Sort",
    "difficulty": "Easy",
    "category": "Sorting",
    "explanation": "Sort an Array by repeatedly taking one element and inserting it into its correct position.",
    "examples": [
      {
        "input": "nums = [12, 11, 13, 5, 6]",
        "output": "[5, 6, 11, 12, 13]"
      }
      ],
    "expected_output": "[5, 6, 11, 12, 13]"
  },
  {
    "id": 68,
    "title": "Merge Sort",
    "difficulty": "medium",
    "category": "Sorting",
    "explanation": "Sort an Array using the merge sort algorithm, which divides the Array into subArrays and merges them.",
    "examples": [
      {
        "input": "nums = [38, 27, 43, 3, 9, 82, 10]",
        "output": "[3, 9, 10, 27, 38, 43, 82]"
      }
      ],
    "expected_output": "[3, 9, 10, 27, 38, 43, 82]"
  },
  {
    "id": 69,
    "title": "Print the Middle of a Given Linked List",
    "difficulty": "medium",
    "category": "Linked List",
    "explanation": "Find and print the middle element of a Linked List.",
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "3"
      }
    ],
    "expected_output": "3"
  },
  {
    "id": 70,
    "title": "Reverse a Linked List",
    "difficulty": "Easy",
    "category": "Linked List",
    "explanation": "Reverse the given Linked List.",
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]"
      }
      ],
    "expected_output": "[5, 4, 3, 2, 1]"
  },
  {
    "id": 71,
    "title": "Deletion in Linked List",
    "difficulty": "Easy",
    "category": "Linked List",
    "explanation": "Delete a specific node from a Linked List.",
    "examples": [
      {
        "input": "head = [1, 2, 3, 4], target = 3",
        "output": "[1, 2, 4]"
      }
      ],
    "expected_output": "[1, 2, 4]"
  },
  {
    "id": 72,
    "title": "Reverse Linked List",
    "difficulty": "Easy",
    "category": "Linked List",
    "explanation": "Reverse the given Linked List.",
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]"
      }
      ],
    "expected_output": "[5, 4, 3, 2, 1]"
  },
  {
    "id": 73,
    "title": "Remove Duplicate Element",
    "difficulty": "Easy",
    "category": "Linked List",
    "explanation": "Remove all duplicate elements from a Linked List.",
    "examples": [
      {
        "input": "head = [1, 2, 2, 3, 4, 4]",
        "output": "[1, 2, 3, 4]"
      }
      ],
    "expected_output": "[1, 2, 3, 4]"
  },
  {
    "id": 74,
    "title": "Create a Linked List",
    "difficulty": "Easy",
    "category": "Linked List",
    "explanation": "Create a Linked List from a given Array of elements.",
    "examples": [
      {
        "input": "arr = [1, 2, 3, 4, 5]",
        "output": "[1, 2, 3, 4, 5]"
      }
      ],
    "expected_output": "[1, 2, 3, 4, 5]"
  },
  {
    "id": 75,
    "title": "Create a Double Linked List",
    "difficulty": "Easy",
    "category": "Linked List",
    "explanation": "Create a double Linked List from a given Array of elements.",
    "examples": [
      {
        "input": "arr = [1, 2, 3, 4]",
        "output": "[1 <-> 2 <-> 3 <-> 4]"
      }
      ],
    "expected_output": "[1 <-> 2 <-> 3 <-> 4]"
  },
  {
    "id": 76,
    "title": "Merge Two Linked Lists",
    "difficulty": "medium",
    "category": "Linked List",
    "explanation": "Merge two sorted Linked Lists into one sorted Linked List.",
    "examples": [
      {
        "input": "list1 = [1, 3, 5], list2 = [2, 4, 6]",
        "output": "[1, 2, 3, 4, 5, 6]"
      }
      ],
    "expected_output": "[1, 2, 3, 4, 5, 6]"
  },
  {
    "id": 77,
    "title": "Add Element to Linked List",
    "difficulty": "medium",
    "category": "Linked List",
    "explanation": "Add an element to the end of the Linked List.",
    "examples": [
      {
        "input": "head = [1, 2, 3], value = 4",
        "output": "[1, 2, 3, 4]"
      }
      ],
    "expected_output": "[1, 2, 3, 4]"
  },
  {
    "id": 78,
    "title": "Search an Element in Linked List",
    "difficulty": "Easy",
    "category": "Linked List",
    "explanation": "Search for an element in a Linked List.",
    "examples": [
      {
        "input": "head = [1, 2, 3, 4], target = 3",
        "output": "true"
      }
      ],
    "expected_output": "true"
  },
  {
    "id": 79,
    "title": "Implement Stack Using Array",
    "difficulty": "Easy",
    "category": "Stack",
    "explanation": "Implement a Stack data structure using an Array, with operations like push, pop, peek, and isEmpty.",
    "examples": [
      {
        "input": "Stack = []",
        "output": "After pushing 10, Stack = [10]"
      }
      ],
    "expected_output": "After pushing 10, Stack = [10]"
  },
  {
    "id": 80,
    "title": "Implement Stack Using Linked List",
    "difficulty": "Easy",
    "category": "Stack",
    "explanation": "Implement a Stack data structure using a Linked List, with operations like push, pop, peek, and isEmpty.",
    "examples": [
      {
        "input": "Stack = []",
        "output": "After pushing 10, Stack = [10]"
      }
      ],
    "expected_output": "After pushing 10, Stack = [10]"
  },
  {
    "id": 81,
    "title": "Infix to Postfix Conversion",
    "difficulty": "medium",
    "category": "Stack",
    "explanation": "Convert an infix expression to postfix notation using a Stack.",
    "examples": [
      {
        "input": "infix = 'A + B * C'",
        "output": "postfix = 'A B C * +'"
      }
      ],
    "expected_output": "postfix = 'A B C * +'"
  },
  {
    "id": 82,
    "title": "Infix to Prefix Conversion",
    "difficulty": "medium",
    "category": "Stack",
    "explanation": "Convert an infix expression to prefix notation using a Stack.",
    "examples": [
      {
        "input": "infix = 'A + B * C'",
        "output": "prefix = '+ A * B C'"
      }
      ],
    "expected_output": "prefix = '+ A * B C'"
  },
  {
    "id": 83,
    "title": "Check for Balanced Parentheses",
    "difficulty": "medium",
    "category": "Stack",
    "explanation": "Check if the parentheses in a given String are balanced using a Stack.",
    "examples": [
      {
        "input": "expression = '(a + b) * (c + d)'",
        "output": "true"
      }
    ],
    "expected_output": "true"
  },
  {
    "id": 84,
    "title": "Implement Queue using Array",
    "difficulty": "Easy",
    "category": "Queue",
    "explanation": "Use a fixed-size Array with front and rear pointers.",
    "examples": [
      {
        "input": "EnQueue(10), EnQueue(20), DeQueue(), EnQueue(30)",
        "output": "[20, 30]"
      }
      ],
    "expected_output": "[20, 30]"
  },
  {
    "id": 85,
    "title": "Implement Queue using Linked List",
    "difficulty": "Easy",
    "category": "Queue",
    "explanation": "Use nodes with pointers to build FIFO structure.",
    "examples": [
      {
        "input": "EnQueue(1), EnQueue(2), EnQueue(3), DeQueue()",
        "output": "[2, 3]"
      }
      ],
    "expected_output": "[2, 3]"
  },
  {
    "id": 86,
    "title": "Implement Circular Queue",
    "difficulty": "medium",
    "category": "Queue",
    "explanation": "Use modular arithmetic to wrap around the Queue using an Array.",
    "examples": [
      {
        "input": "EnQueue(1), EnQueue(2), EnQueue(3), DeQueue(), EnQueue(4)",
        "output": "[2, 3, 4]"
      }
      ],
    "expected_output": "[2, 3, 4]"
  },
  {
    "id": 87,
    "title": "Implement Deque",
    "difficulty": "medium",
    "category": "Queue",
    "explanation": "A double-ended Queue where insert and delete is allowed from both ends.",
    "examples": [
      {
        "input": "InsertFront(1), InsertLast(2), DeleteFront(), InsertLast(3)",
        "output": "[2, 3]"
      }
      ],
    "expected_output": "[2, 3]"
  },
  {
    "id": 88,
    "title": "Print all elements of a Graph in new lines",
    "difficulty": "medium",
    "category": "Graph",
    "explanation": "Use BFS or DFS to print each connected component on a new line.",
    "examples": [
      {
        "input": "Graph: 1-2, 3-4",
        "output": "1 2\n3 4"
      }
      ],
    "expected_output": "1 2\n3 4"
  },
  {
    "id": 89,
    "title": "Factorial Calculation (Recursion)",
    "difficulty": "Easy",
    "category": "Recursion",
    "explanation": "Base case: 0! = 1, Recursive call: n * factorial(n-1).",
    "examples": [
      {
        "input": "5",
        "output": "120"
      }
      ],
    "expected_output": "120"
  },
  {
    "id": 90,
    "title": "Fibonacci Series",
    "difficulty": "Easy",
    "category": "Recursion",
    "explanation": "Recursive function with base cases for n=0 and n=1.",
    "examples": [
      {
        "input": "6",
        "output": "0 1 1 2 3 5"
      }
      ],
    "expected_output": "0 1 1 2 3 5"
  },
  {
    "id": 91,
    "title": "Binary Search",
    "difficulty": "medium",
    "category": "Array",
    "explanation": "Use divide and conquer to search in a sorted Array.",
    "examples": [
      {
        "input": "Array = [1, 3, 5, 7, 9], target = 5",
        "output": "2"
      }
      ],
    "expected_output": "2"
  },
  {
    "id": 92,
    "title": "Reverse a Linked List Using Recursion",
    "difficulty": "medium",
    "category": "Linked List",
    "explanation": "Use Recursion to reverse the pointer directions.",
    "examples": [
      {
        "input": "1 -> 2 -> 3 -> NULL",
        "output": "3 -> 2 -> 1 -> NULL"
      }
      ],
    "expected_output": "3 -> 2 -> 1 -> NULL"
  },
  {
    "id": 93,
    "title": "Sum of Array Using Tail Recursion",
    "difficulty": "medium",
    "category": "Recursion",
    "explanation": "Use an accumulator parameter to hold the sum.",
    "examples": [
      {
        "input": "[1, 2, 3, 4]",
        "output": "10"
      }
      ],
    "expected_output": "10"
  },
  {
    "id": 94,
    "title": "Reverse a String (Recursion)",
    "difficulty": "medium",
    "category": "String",
    "explanation": "Recursively build reversed String from last character.",
    "examples": [
      {
        "input": "hello",
        "output": "olleh"
      }
      ],
    "expected_output": "olleh"
  },
  {
    "id": 95,
    "title": "Create a Tree Using Linked List",
    "difficulty": "Easy",
    "category": "Tree",
    "explanation": "Construct a binary Tree by creating nodes with left and right pointers.",
    "examples": [
      {
        "input": "Insert: [1, 2, 3]",
        "output": "Root: 1, Left: 2, Right: 3"
      }
      ],
    "expected_output": "Root: 1, Left: 2, Right: 3"
  },
  {
    "id": 96,
    "title": "Height of Binary Tree",
    "difficulty": "Easy",
    "category": "Tree",
    "explanation": "Use Recursion to find the maximum depth of left and right subTrees.",
    "examples": [
      {
        "input": "Tree: [1, 2, 3, null, null, 4]",
        "output": "3"
      }
      ],
    "expected_output": "3"
  },
  {
    "id": 97,
    "title": "Zigzag Tree Traversal",
    "difficulty": "medium",
    "category": "Tree",
    "explanation": "Alternate between left-to-right and right-to-left level order traversal.",
    "examples": [
      {
        "input": "Tree: [1, 2, 3, 4, 5, 6, 7]",
        "output": "[[1], [3, 2], [4, 5, 6, 7]]"
      }
      ],
    "expected_output": "[[1], [3, 2], [4, 5, 6, 7]]"
  },
  {
    "id": 98,
    "title": "Tree Traversal Inorder",
    "difficulty": "medium",
    "category": "Tree",
    "explanation": "Traverse left subTree, visit root, then traverse right subTree.",
    "examples": [
      {
        "input": "Tree: [1, null, 2, 3]",
        "output": "[1, 3, 2]"
      }
      ],
    "expected_output": "[1, 3, 2]"
  },
  {
    "id": 99,
    "title": "Tree Traversal Postorder",
    "difficulty": "medium",
    "category": "Tree",
    "explanation": "Traverse left and right subTrees before visiting the root node.",
    "examples": [
      {
        "input": "Tree: [1, null, 2, 3]",
        "output": "[3, 2, 1]"
      }
      ],
    "expected_output": "[3, 2, 1]"
  },
  {
    "id": 100,
    "title": "Create Graph Using Linked List",
    "difficulty": "Easy",
    "category": "Graph",
    "explanation": "Build adjacency list representation using Linked Lists.",
    "examples": [
      {
        "input": "Edges: [(1,2), (1,3), (2,4)]",
        "output": "{1:[2,3], 2:[4], 3:[], 4:[]}"
      }
      ],
    "expected_output": "{1:[2,3], 2:[4], 3:[], 4:[]}"
  },
  {
    "id": 101,
    "title": "BFS of Graph Traversal",
    "difficulty": "Easy",
    "category": "Graph",
    "explanation": "Use a Queue to traverse Graph level-by-level.",
    "examples": [
      {
        "input": "Graph: {0:[1,2], 1:[3], 2:[4], 3:[], 4:[]}, Start: 0",
        "output": "[0, 1, 2, 3, 4]"
      }
      ],
    "expected_output": "[0, 1, 2, 3, 4]"
  },
  {
    "id": 102,
    "title": "DFS of Graph Traversal",
    "difficulty": "Easy",
    "category": "Graph",
    "explanation": "Use Stack or Recursion to explore as deep as possible.",
    "examples": [
      {
        "input": "Graph: {0:[1,2], 1:[3], 2:[4], 3:[], 4:[]}, Start: 0",
        "output": "[0, 1, 3, 2, 4]"
      }
      ],
    "expected_output": "[0, 1, 3, 2, 4]"
  },
  {
    "id": 103,
    "title": "Union Find (Disjoint Set)",
    "difficulty": "Easy",
    "category": "Graph",
    "explanation": "Use path compression and union by rank for efficiency.",
    "examples": [
      {
        "input": "Union(1,2), Union(2,3), Find(1), Find(3)",
        "output": "[1, 1]"
      }
      ],
    "expected_output": "[1, 1]"
  },
  {
    "id": 104,
    "title": "Level of Node in Graph",
    "difficulty": "medium",
    "category": "Graph",
    "explanation": "Use BFS to track levels from a source node.",
    "examples": [
      {
        "input": "Graph: {1:[2,3], 2:[4], 3:[], 4:[]}, Start: 1",
        "output": "{1:0, 2:1, 3:1, 4:2}"
      }
      ],
    "expected_output": "{1:0, 2:1, 3:1, 4:2}"
  },
  {
    "id": 105,
    "title": "Climbing Stairs",
    "difficulty": "Easy",
    "category": "Dynamic Programming",
    "explanation": "Fibonacci variation: total ways to climb n steps using 1 or 2 steps.",
    "examples": [
      {
        "input": "n = 5",
        "output": "8"
      }
      ],
    "expected_output": "8"
  },
  {
    "id": 106,
    "title": "Min Cost Climbing Stairs",
    "difficulty": "Easy",
    "category": "Dynamic Programming",
    "explanation": "Dynamic programming approach to find minimum cost to reach top.",
    "examples": [
      {
        "input": "cost = [10, 15, 20]",
        "output": "15"
      }
      ],
    "expected_output": "15"
  },
  {
    "id": 107,
    "title": "Coin Change",
    "difficulty": "Easy",
    "category": "Dynamic Programming",
    "explanation": "Find minimum number of coins that make up a given amount.",
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3"
      }
      ],
    "expected_output": "3"
  },
  {
    "id": 108,
    "title": "House Robber",
    "difficulty": "medium",
    "category": "Dynamic Programming",
    "explanation": "Choose non-adjacent houses to rob for maximum sum.",
    "examples": [
      {
        "input": "[2, 7, 9, 3, 1]",
        "output": "12"
      }
      ],
    "expected_output": "12"
  },
  {
    "id": 109,
    "title": "Counting Bits",
    "difficulty": "Easy",
    "category": "Bit Manipulation",
    "explanation": "Count number of 1s in binary representation of every number up to n.",
    "examples": [
      {
        "input": "n = 5",
        "output": "[0,1,1,2,1,2]"
      }
      ],
    "expected_output": "[0,1,1,2,1,2]"
  },
  {
    "id": 110,
    "title": "Reverse Bits",
    "difficulty": "Easy",
    "category": "Bit Manipulation",
    "explanation": "Reverse the bits of a 32-bit unsigned integer.",
    "examples": [
      {
        "input": "Input = 43261596 (binary: 00000010100101000001111010011100)",
        "output": "964176192 (binary: 00111001011110000010100101000000)"
      }
      ],
    "expected_output": "964176192"
  },
  {
    "id": 111,
    "title": "Number of 1 Bits",
    "difficulty": "Easy",
    "category": "Bit Manipulation",
    "explanation": "Use bit masking to count number of 1s in binary representation.",
    "examples": [
      {
        "input": "n = 11 (binary: 00000000000000000000000000001011)",
        "output": "3"
      }
      ],
    "expected_output": "3"
  }
]
